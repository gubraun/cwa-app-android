# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  resourceGroupName: coverity
  storageAccountName: coveritystore
  fileShareName: cov-analysis-share
  mntPath: /mnt/$(storageAccountName)/$(fileShareName)
  COVERITY_TOOL_HOME: $(Agent.BuildDirectory)/cov-analysis
  
trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

steps:
# Copy and install Coverity analysis package
- script: |
    cd $(Agent.BuildDirectory)
    curl --user admin:1DB7443FC1626ED938FAC2F9BAE0677D -o license.dat https://coverity-vm.synopsysdemo.net:8443/downloadFile.htm?fn=license.dat
    curl --user admin:1DB7443FC1626ED938FAC2F9BAE0677D -o cov-analysis-linux64-2020.06.tar.gz https://coverity-vm.synopsysdemo.net:8443/downloadFile.htm?fn=cov-analysis-linux64-2020.06.tar.gz
    tar -xzf cov-analysis-linux64-2020.06.tar.gz
    mv cov-analysis-linux64-2020.06 cov-analysis
    cp license.dat ./cov-analysis/bin
  displayName: 'Install Coverity'

# Configure Coverity
- script: |
    $(COVERITY_TOOL_HOME)/bin/cov-configure --java
    $(COVERITY_TOOL_HOME)/bin/cov-configure --kotlin
  displayName: 'Configure Coverity'

# Coverity scan
- task: synopsys-coverity@1
  inputs:
    coverityService: 'coverity-vm'
    projectName: 'Corona Warn App - Android'
    streamName: 'az-cwa-app-android'
    checkIssues: true
    issueView: 'Outstanding High Security Risks'
    issueStatus: 'failure'
    coverityBuildDirectory: '$(Build.Repository.LocalPath)'
    buildCommand: './gradlew --no-daemon assembleDeviceRelease'
    allowUntrusted: true
    coverityRunType: 'buildanalyzecommit'
    customCommandArgs: true
    covAnalyzeArgs: '--webapp-security --android-security --distrust-all --webapp-security-aggressiveness-level high --enable-audit-checkers --enable-audit-dataflow'
    covBuildArgs: '--fs-capture-search .'
